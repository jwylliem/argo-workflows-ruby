=begin
#Argo Workflows API

#Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/

The version of the OpenAPI document: VERSION

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.1

=end

require 'cgi'

module ArgoWorkflows
  class ArtifactServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get an input artifact.
    # @param namespace [String] 
    # @param name [String] 
    # @param pod_name [String] 
    # @param artifact_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_input_artifact(namespace, name, pod_name, artifact_name, opts = {})
      get_input_artifact_with_http_info(namespace, name, pod_name, artifact_name, opts)
      nil
    end

    # Get an input artifact.
    # @param namespace [String] 
    # @param name [String] 
    # @param pod_name [String] 
    # @param artifact_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_input_artifact_with_http_info(namespace, name, pod_name, artifact_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ArtifactServiceApi.get_input_artifact ...'
      end
      # verify the required parameter 'namespace' is set
      if @api_client.config.client_side_validation && namespace.nil?
        fail ArgumentError, "Missing the required parameter 'namespace' when calling ArtifactServiceApi.get_input_artifact"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ArtifactServiceApi.get_input_artifact"
      end
      # verify the required parameter 'pod_name' is set
      if @api_client.config.client_side_validation && pod_name.nil?
        fail ArgumentError, "Missing the required parameter 'pod_name' when calling ArtifactServiceApi.get_input_artifact"
      end
      # verify the required parameter 'artifact_name' is set
      if @api_client.config.client_side_validation && artifact_name.nil?
        fail ArgumentError, "Missing the required parameter 'artifact_name' when calling ArtifactServiceApi.get_input_artifact"
      end
      # resource path
      local_var_path = '/input-artifacts/{namespace}/{name}/{podName}/{artifactName}'.sub('{' + 'namespace' + '}', CGI.escape(namespace.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s)).sub('{' + 'podName' + '}', CGI.escape(pod_name.to_s)).sub('{' + 'artifactName' + '}', CGI.escape(artifact_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ArtifactServiceApi.get_input_artifact",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArtifactServiceApi#get_input_artifact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an input artifact by UID.
    # @param namespace [String] 
    # @param uid [String] 
    # @param pod_name [String] 
    # @param artifact_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_input_artifact_by_uid(namespace, uid, pod_name, artifact_name, opts = {})
      get_input_artifact_by_uid_with_http_info(namespace, uid, pod_name, artifact_name, opts)
      nil
    end

    # Get an input artifact by UID.
    # @param namespace [String] 
    # @param uid [String] 
    # @param pod_name [String] 
    # @param artifact_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_input_artifact_by_uid_with_http_info(namespace, uid, pod_name, artifact_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ArtifactServiceApi.get_input_artifact_by_uid ...'
      end
      # verify the required parameter 'namespace' is set
      if @api_client.config.client_side_validation && namespace.nil?
        fail ArgumentError, "Missing the required parameter 'namespace' when calling ArtifactServiceApi.get_input_artifact_by_uid"
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling ArtifactServiceApi.get_input_artifact_by_uid"
      end
      # verify the required parameter 'pod_name' is set
      if @api_client.config.client_side_validation && pod_name.nil?
        fail ArgumentError, "Missing the required parameter 'pod_name' when calling ArtifactServiceApi.get_input_artifact_by_uid"
      end
      # verify the required parameter 'artifact_name' is set
      if @api_client.config.client_side_validation && artifact_name.nil?
        fail ArgumentError, "Missing the required parameter 'artifact_name' when calling ArtifactServiceApi.get_input_artifact_by_uid"
      end
      # resource path
      local_var_path = '/input-artifacts-by-uid/{uid}/{podName}/{artifactName}'.sub('{' + 'namespace' + '}', CGI.escape(namespace.to_s)).sub('{' + 'uid' + '}', CGI.escape(uid.to_s)).sub('{' + 'podName' + '}', CGI.escape(pod_name.to_s)).sub('{' + 'artifactName' + '}', CGI.escape(artifact_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ArtifactServiceApi.get_input_artifact_by_uid",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArtifactServiceApi#get_input_artifact_by_uid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an output artifact.
    # @param namespace [String] 
    # @param name [String] 
    # @param pod_name [String] 
    # @param artifact_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_output_artifact(namespace, name, pod_name, artifact_name, opts = {})
      get_output_artifact_with_http_info(namespace, name, pod_name, artifact_name, opts)
      nil
    end

    # Get an output artifact.
    # @param namespace [String] 
    # @param name [String] 
    # @param pod_name [String] 
    # @param artifact_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_output_artifact_with_http_info(namespace, name, pod_name, artifact_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ArtifactServiceApi.get_output_artifact ...'
      end
      # verify the required parameter 'namespace' is set
      if @api_client.config.client_side_validation && namespace.nil?
        fail ArgumentError, "Missing the required parameter 'namespace' when calling ArtifactServiceApi.get_output_artifact"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ArtifactServiceApi.get_output_artifact"
      end
      # verify the required parameter 'pod_name' is set
      if @api_client.config.client_side_validation && pod_name.nil?
        fail ArgumentError, "Missing the required parameter 'pod_name' when calling ArtifactServiceApi.get_output_artifact"
      end
      # verify the required parameter 'artifact_name' is set
      if @api_client.config.client_side_validation && artifact_name.nil?
        fail ArgumentError, "Missing the required parameter 'artifact_name' when calling ArtifactServiceApi.get_output_artifact"
      end
      # resource path
      local_var_path = '/artifacts/{namespace}/{name}/{podName}/{artifactName}'.sub('{' + 'namespace' + '}', CGI.escape(namespace.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s)).sub('{' + 'podName' + '}', CGI.escape(pod_name.to_s)).sub('{' + 'artifactName' + '}', CGI.escape(artifact_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ArtifactServiceApi.get_output_artifact",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArtifactServiceApi#get_output_artifact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an output artifact by UID.
    # @param uid [String] 
    # @param pod_name [String] 
    # @param artifact_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_output_artifact_by_uid(uid, pod_name, artifact_name, opts = {})
      get_output_artifact_by_uid_with_http_info(uid, pod_name, artifact_name, opts)
      nil
    end

    # Get an output artifact by UID.
    # @param uid [String] 
    # @param pod_name [String] 
    # @param artifact_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_output_artifact_by_uid_with_http_info(uid, pod_name, artifact_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ArtifactServiceApi.get_output_artifact_by_uid ...'
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling ArtifactServiceApi.get_output_artifact_by_uid"
      end
      # verify the required parameter 'pod_name' is set
      if @api_client.config.client_side_validation && pod_name.nil?
        fail ArgumentError, "Missing the required parameter 'pod_name' when calling ArtifactServiceApi.get_output_artifact_by_uid"
      end
      # verify the required parameter 'artifact_name' is set
      if @api_client.config.client_side_validation && artifact_name.nil?
        fail ArgumentError, "Missing the required parameter 'artifact_name' when calling ArtifactServiceApi.get_output_artifact_by_uid"
      end
      # resource path
      local_var_path = '/artifacts-by-uid/{uid}/{podName}/{artifactName}'.sub('{' + 'uid' + '}', CGI.escape(uid.to_s)).sub('{' + 'podName' + '}', CGI.escape(pod_name.to_s)).sub('{' + 'artifactName' + '}', CGI.escape(artifact_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ArtifactServiceApi.get_output_artifact_by_uid",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArtifactServiceApi#get_output_artifact_by_uid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
