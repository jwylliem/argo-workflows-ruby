=begin
#Argo Workflows API

#Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/

The version of the OpenAPI document: VERSION

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.1

=end

require 'cgi'

module ArgoWorkflows
  class PipelineServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param namespace [String] 
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :delete_options_grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional.
    # @option opts [String] :delete_options_preconditions_uid Specifies the target UID. +optional.
    # @option opts [String] :delete_options_preconditions_resource_version Specifies the target ResourceVersion +optional.
    # @option opts [Boolean] :delete_options_orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional.
    # @option opts [String] :delete_options_propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. +optional.
    # @option opts [Array<String>] :delete_options_dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional.
    # @return [Object]
    def delete_pipeline(namespace, name, opts = {})
      data, _status_code, _headers = delete_pipeline_with_http_info(namespace, name, opts)
      data
    end

    # @param namespace [String] 
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :delete_options_grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional.
    # @option opts [String] :delete_options_preconditions_uid Specifies the target UID. +optional.
    # @option opts [String] :delete_options_preconditions_resource_version Specifies the target ResourceVersion +optional.
    # @option opts [Boolean] :delete_options_orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional.
    # @option opts [String] :delete_options_propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. +optional.
    # @option opts [Array<String>] :delete_options_dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_pipeline_with_http_info(namespace, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineServiceApi.delete_pipeline ...'
      end
      # verify the required parameter 'namespace' is set
      if @api_client.config.client_side_validation && namespace.nil?
        fail ArgumentError, "Missing the required parameter 'namespace' when calling PipelineServiceApi.delete_pipeline"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling PipelineServiceApi.delete_pipeline"
      end
      # resource path
      local_var_path = '/api/v1/pipelines/{namespace}/{name}'.sub('{' + 'namespace' + '}', CGI.escape(namespace.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'deleteOptions.gracePeriodSeconds'] = opts[:'delete_options_grace_period_seconds'] if !opts[:'delete_options_grace_period_seconds'].nil?
      query_params[:'deleteOptions.preconditions.uid'] = opts[:'delete_options_preconditions_uid'] if !opts[:'delete_options_preconditions_uid'].nil?
      query_params[:'deleteOptions.preconditions.resourceVersion'] = opts[:'delete_options_preconditions_resource_version'] if !opts[:'delete_options_preconditions_resource_version'].nil?
      query_params[:'deleteOptions.orphanDependents'] = opts[:'delete_options_orphan_dependents'] if !opts[:'delete_options_orphan_dependents'].nil?
      query_params[:'deleteOptions.propagationPolicy'] = opts[:'delete_options_propagation_policy'] if !opts[:'delete_options_propagation_policy'].nil?
      query_params[:'deleteOptions.dryRun'] = @api_client.build_collection_param(opts[:'delete_options_dry_run'], :multi) if !opts[:'delete_options_dry_run'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelineServiceApi.delete_pipeline",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineServiceApi#delete_pipeline\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param namespace [String] 
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :get_options_resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
    # @return [GithubComArgoprojLabsArgoDataflowApiV1alpha1Pipeline]
    def get_pipeline(namespace, name, opts = {})
      data, _status_code, _headers = get_pipeline_with_http_info(namespace, name, opts)
      data
    end

    # @param namespace [String] 
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :get_options_resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
    # @return [Array<(GithubComArgoprojLabsArgoDataflowApiV1alpha1Pipeline, Integer, Hash)>] GithubComArgoprojLabsArgoDataflowApiV1alpha1Pipeline data, response status code and response headers
    def get_pipeline_with_http_info(namespace, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineServiceApi.get_pipeline ...'
      end
      # verify the required parameter 'namespace' is set
      if @api_client.config.client_side_validation && namespace.nil?
        fail ArgumentError, "Missing the required parameter 'namespace' when calling PipelineServiceApi.get_pipeline"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling PipelineServiceApi.get_pipeline"
      end
      # resource path
      local_var_path = '/api/v1/pipelines/{namespace}/{name}'.sub('{' + 'namespace' + '}', CGI.escape(namespace.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'getOptions.resourceVersion'] = opts[:'get_options_resource_version'] if !opts[:'get_options_resource_version'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GithubComArgoprojLabsArgoDataflowApiV1alpha1Pipeline'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelineServiceApi.get_pipeline",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineServiceApi#get_pipeline\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param namespace [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :list_options_label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
    # @option opts [String] :list_options_field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
    # @option opts [Boolean] :list_options_watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
    # @option opts [Boolean] :list_options_allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored. +optional.
    # @option opts [String] :list_options_resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
    # @option opts [String] :list_options_resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
    # @option opts [String] :list_options_timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
    # @option opts [String] :list_options_limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    # @option opts [String] :list_options_continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    # @return [GithubComArgoprojLabsArgoDataflowApiV1alpha1PipelineList]
    def list_pipelines(namespace, opts = {})
      data, _status_code, _headers = list_pipelines_with_http_info(namespace, opts)
      data
    end

    # @param namespace [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :list_options_label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
    # @option opts [String] :list_options_field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
    # @option opts [Boolean] :list_options_watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
    # @option opts [Boolean] :list_options_allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored. +optional.
    # @option opts [String] :list_options_resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
    # @option opts [String] :list_options_resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
    # @option opts [String] :list_options_timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
    # @option opts [String] :list_options_limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    # @option opts [String] :list_options_continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    # @return [Array<(GithubComArgoprojLabsArgoDataflowApiV1alpha1PipelineList, Integer, Hash)>] GithubComArgoprojLabsArgoDataflowApiV1alpha1PipelineList data, response status code and response headers
    def list_pipelines_with_http_info(namespace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineServiceApi.list_pipelines ...'
      end
      # verify the required parameter 'namespace' is set
      if @api_client.config.client_side_validation && namespace.nil?
        fail ArgumentError, "Missing the required parameter 'namespace' when calling PipelineServiceApi.list_pipelines"
      end
      # resource path
      local_var_path = '/api/v1/pipelines/{namespace}'.sub('{' + 'namespace' + '}', CGI.escape(namespace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'listOptions.labelSelector'] = opts[:'list_options_label_selector'] if !opts[:'list_options_label_selector'].nil?
      query_params[:'listOptions.fieldSelector'] = opts[:'list_options_field_selector'] if !opts[:'list_options_field_selector'].nil?
      query_params[:'listOptions.watch'] = opts[:'list_options_watch'] if !opts[:'list_options_watch'].nil?
      query_params[:'listOptions.allowWatchBookmarks'] = opts[:'list_options_allow_watch_bookmarks'] if !opts[:'list_options_allow_watch_bookmarks'].nil?
      query_params[:'listOptions.resourceVersion'] = opts[:'list_options_resource_version'] if !opts[:'list_options_resource_version'].nil?
      query_params[:'listOptions.resourceVersionMatch'] = opts[:'list_options_resource_version_match'] if !opts[:'list_options_resource_version_match'].nil?
      query_params[:'listOptions.timeoutSeconds'] = opts[:'list_options_timeout_seconds'] if !opts[:'list_options_timeout_seconds'].nil?
      query_params[:'listOptions.limit'] = opts[:'list_options_limit'] if !opts[:'list_options_limit'].nil?
      query_params[:'listOptions.continue'] = opts[:'list_options_continue'] if !opts[:'list_options_continue'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GithubComArgoprojLabsArgoDataflowApiV1alpha1PipelineList'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelineServiceApi.list_pipelines",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineServiceApi#list_pipelines\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param namespace [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name optional - only return entries for this pipeline.
    # @option opts [String] :step_name optional - only return entries for this step.
    # @option opts [String] :grep optional - only return entries which match this expresssion.
    # @option opts [String] :pod_log_options_container The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional.
    # @option opts [Boolean] :pod_log_options_follow Follow the log stream of the pod. Defaults to false. +optional.
    # @option opts [Boolean] :pod_log_options_previous Return previous terminated container logs. Defaults to false. +optional.
    # @option opts [String] :pod_log_options_since_seconds A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional.
    # @option opts [String] :pod_log_options_since_time_seconds Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
    # @option opts [Integer] :pod_log_options_since_time_nanos Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.
    # @option opts [Boolean] :pod_log_options_timestamps If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional.
    # @option opts [String] :pod_log_options_tail_lines If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional.
    # @option opts [String] :pod_log_options_limit_bytes If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional.
    # @option opts [Boolean] :pod_log_options_insecure_skip_tls_verify_backend insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#39;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional.
    # @return [StreamResultOfPipelineLogEntry]
    def pipeline_logs(namespace, opts = {})
      data, _status_code, _headers = pipeline_logs_with_http_info(namespace, opts)
      data
    end

    # @param namespace [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name optional - only return entries for this pipeline.
    # @option opts [String] :step_name optional - only return entries for this step.
    # @option opts [String] :grep optional - only return entries which match this expresssion.
    # @option opts [String] :pod_log_options_container The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional.
    # @option opts [Boolean] :pod_log_options_follow Follow the log stream of the pod. Defaults to false. +optional.
    # @option opts [Boolean] :pod_log_options_previous Return previous terminated container logs. Defaults to false. +optional.
    # @option opts [String] :pod_log_options_since_seconds A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional.
    # @option opts [String] :pod_log_options_since_time_seconds Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
    # @option opts [Integer] :pod_log_options_since_time_nanos Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.
    # @option opts [Boolean] :pod_log_options_timestamps If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional.
    # @option opts [String] :pod_log_options_tail_lines If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional.
    # @option opts [String] :pod_log_options_limit_bytes If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional.
    # @option opts [Boolean] :pod_log_options_insecure_skip_tls_verify_backend insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#39;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional.
    # @return [Array<(StreamResultOfPipelineLogEntry, Integer, Hash)>] StreamResultOfPipelineLogEntry data, response status code and response headers
    def pipeline_logs_with_http_info(namespace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineServiceApi.pipeline_logs ...'
      end
      # verify the required parameter 'namespace' is set
      if @api_client.config.client_side_validation && namespace.nil?
        fail ArgumentError, "Missing the required parameter 'namespace' when calling PipelineServiceApi.pipeline_logs"
      end
      # resource path
      local_var_path = '/api/v1/stream/pipelines/{namespace}/logs'.sub('{' + 'namespace' + '}', CGI.escape(namespace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'stepName'] = opts[:'step_name'] if !opts[:'step_name'].nil?
      query_params[:'grep'] = opts[:'grep'] if !opts[:'grep'].nil?
      query_params[:'podLogOptions.container'] = opts[:'pod_log_options_container'] if !opts[:'pod_log_options_container'].nil?
      query_params[:'podLogOptions.follow'] = opts[:'pod_log_options_follow'] if !opts[:'pod_log_options_follow'].nil?
      query_params[:'podLogOptions.previous'] = opts[:'pod_log_options_previous'] if !opts[:'pod_log_options_previous'].nil?
      query_params[:'podLogOptions.sinceSeconds'] = opts[:'pod_log_options_since_seconds'] if !opts[:'pod_log_options_since_seconds'].nil?
      query_params[:'podLogOptions.sinceTime.seconds'] = opts[:'pod_log_options_since_time_seconds'] if !opts[:'pod_log_options_since_time_seconds'].nil?
      query_params[:'podLogOptions.sinceTime.nanos'] = opts[:'pod_log_options_since_time_nanos'] if !opts[:'pod_log_options_since_time_nanos'].nil?
      query_params[:'podLogOptions.timestamps'] = opts[:'pod_log_options_timestamps'] if !opts[:'pod_log_options_timestamps'].nil?
      query_params[:'podLogOptions.tailLines'] = opts[:'pod_log_options_tail_lines'] if !opts[:'pod_log_options_tail_lines'].nil?
      query_params[:'podLogOptions.limitBytes'] = opts[:'pod_log_options_limit_bytes'] if !opts[:'pod_log_options_limit_bytes'].nil?
      query_params[:'podLogOptions.insecureSkipTLSVerifyBackend'] = opts[:'pod_log_options_insecure_skip_tls_verify_backend'] if !opts[:'pod_log_options_insecure_skip_tls_verify_backend'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StreamResultOfPipelineLogEntry'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelineServiceApi.pipeline_logs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineServiceApi#pipeline_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param namespace [String] 
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def restart_pipeline(namespace, name, opts = {})
      data, _status_code, _headers = restart_pipeline_with_http_info(namespace, name, opts)
      data
    end

    # @param namespace [String] 
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def restart_pipeline_with_http_info(namespace, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineServiceApi.restart_pipeline ...'
      end
      # verify the required parameter 'namespace' is set
      if @api_client.config.client_side_validation && namespace.nil?
        fail ArgumentError, "Missing the required parameter 'namespace' when calling PipelineServiceApi.restart_pipeline"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling PipelineServiceApi.restart_pipeline"
      end
      # resource path
      local_var_path = '/api/v1/pipelines/{namespace}/{name}/restart'.sub('{' + 'namespace' + '}', CGI.escape(namespace.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelineServiceApi.restart_pipeline",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineServiceApi#restart_pipeline\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param namespace [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :list_options_label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
    # @option opts [String] :list_options_field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
    # @option opts [Boolean] :list_options_watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
    # @option opts [Boolean] :list_options_allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored. +optional.
    # @option opts [String] :list_options_resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
    # @option opts [String] :list_options_resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
    # @option opts [String] :list_options_timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
    # @option opts [String] :list_options_limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    # @option opts [String] :list_options_continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    # @return [StreamResultOfPipelinePipelineWatchEvent]
    def watch_pipelines(namespace, opts = {})
      data, _status_code, _headers = watch_pipelines_with_http_info(namespace, opts)
      data
    end

    # @param namespace [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :list_options_label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
    # @option opts [String] :list_options_field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
    # @option opts [Boolean] :list_options_watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
    # @option opts [Boolean] :list_options_allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored. +optional.
    # @option opts [String] :list_options_resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
    # @option opts [String] :list_options_resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
    # @option opts [String] :list_options_timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
    # @option opts [String] :list_options_limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    # @option opts [String] :list_options_continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    # @return [Array<(StreamResultOfPipelinePipelineWatchEvent, Integer, Hash)>] StreamResultOfPipelinePipelineWatchEvent data, response status code and response headers
    def watch_pipelines_with_http_info(namespace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineServiceApi.watch_pipelines ...'
      end
      # verify the required parameter 'namespace' is set
      if @api_client.config.client_side_validation && namespace.nil?
        fail ArgumentError, "Missing the required parameter 'namespace' when calling PipelineServiceApi.watch_pipelines"
      end
      # resource path
      local_var_path = '/api/v1/stream/pipelines/{namespace}'.sub('{' + 'namespace' + '}', CGI.escape(namespace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'listOptions.labelSelector'] = opts[:'list_options_label_selector'] if !opts[:'list_options_label_selector'].nil?
      query_params[:'listOptions.fieldSelector'] = opts[:'list_options_field_selector'] if !opts[:'list_options_field_selector'].nil?
      query_params[:'listOptions.watch'] = opts[:'list_options_watch'] if !opts[:'list_options_watch'].nil?
      query_params[:'listOptions.allowWatchBookmarks'] = opts[:'list_options_allow_watch_bookmarks'] if !opts[:'list_options_allow_watch_bookmarks'].nil?
      query_params[:'listOptions.resourceVersion'] = opts[:'list_options_resource_version'] if !opts[:'list_options_resource_version'].nil?
      query_params[:'listOptions.resourceVersionMatch'] = opts[:'list_options_resource_version_match'] if !opts[:'list_options_resource_version_match'].nil?
      query_params[:'listOptions.timeoutSeconds'] = opts[:'list_options_timeout_seconds'] if !opts[:'list_options_timeout_seconds'].nil?
      query_params[:'listOptions.limit'] = opts[:'list_options_limit'] if !opts[:'list_options_limit'].nil?
      query_params[:'listOptions.continue'] = opts[:'list_options_continue'] if !opts[:'list_options_continue'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StreamResultOfPipelinePipelineWatchEvent'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelineServiceApi.watch_pipelines",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineServiceApi#watch_pipelines\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param namespace [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :list_options_label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
    # @option opts [String] :list_options_field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
    # @option opts [Boolean] :list_options_watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
    # @option opts [Boolean] :list_options_allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored. +optional.
    # @option opts [String] :list_options_resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
    # @option opts [String] :list_options_resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
    # @option opts [String] :list_options_timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
    # @option opts [String] :list_options_limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    # @option opts [String] :list_options_continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    # @return [StreamResultOfPipelineStepWatchEvent]
    def watch_steps(namespace, opts = {})
      data, _status_code, _headers = watch_steps_with_http_info(namespace, opts)
      data
    end

    # @param namespace [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :list_options_label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
    # @option opts [String] :list_options_field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
    # @option opts [Boolean] :list_options_watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
    # @option opts [Boolean] :list_options_allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored. +optional.
    # @option opts [String] :list_options_resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
    # @option opts [String] :list_options_resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
    # @option opts [String] :list_options_timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
    # @option opts [String] :list_options_limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    # @option opts [String] :list_options_continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    # @return [Array<(StreamResultOfPipelineStepWatchEvent, Integer, Hash)>] StreamResultOfPipelineStepWatchEvent data, response status code and response headers
    def watch_steps_with_http_info(namespace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineServiceApi.watch_steps ...'
      end
      # verify the required parameter 'namespace' is set
      if @api_client.config.client_side_validation && namespace.nil?
        fail ArgumentError, "Missing the required parameter 'namespace' when calling PipelineServiceApi.watch_steps"
      end
      # resource path
      local_var_path = '/api/v1/stream/steps/{namespace}'.sub('{' + 'namespace' + '}', CGI.escape(namespace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'listOptions.labelSelector'] = opts[:'list_options_label_selector'] if !opts[:'list_options_label_selector'].nil?
      query_params[:'listOptions.fieldSelector'] = opts[:'list_options_field_selector'] if !opts[:'list_options_field_selector'].nil?
      query_params[:'listOptions.watch'] = opts[:'list_options_watch'] if !opts[:'list_options_watch'].nil?
      query_params[:'listOptions.allowWatchBookmarks'] = opts[:'list_options_allow_watch_bookmarks'] if !opts[:'list_options_allow_watch_bookmarks'].nil?
      query_params[:'listOptions.resourceVersion'] = opts[:'list_options_resource_version'] if !opts[:'list_options_resource_version'].nil?
      query_params[:'listOptions.resourceVersionMatch'] = opts[:'list_options_resource_version_match'] if !opts[:'list_options_resource_version_match'].nil?
      query_params[:'listOptions.timeoutSeconds'] = opts[:'list_options_timeout_seconds'] if !opts[:'list_options_timeout_seconds'].nil?
      query_params[:'listOptions.limit'] = opts[:'list_options_limit'] if !opts[:'list_options_limit'].nil?
      query_params[:'listOptions.continue'] = opts[:'list_options_continue'] if !opts[:'list_options_continue'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StreamResultOfPipelineStepWatchEvent'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PipelineServiceApi.watch_steps",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineServiceApi#watch_steps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
