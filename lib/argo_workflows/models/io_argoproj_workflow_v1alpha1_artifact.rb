=begin
#Argo Workflows API

#Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/

The version of the OpenAPI document: VERSION

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.1

=end

require 'date'
require 'time'

module ArgoWorkflows
  # Artifact indicates an artifact to place at a specified path
  class IoArgoprojWorkflowV1alpha1Artifact
    attr_accessor :archive

    # ArchiveLogs indicates if the container logs should be archived
    attr_accessor :archive_logs

    attr_accessor :artifactory

    # From allows an artifact to reference an artifact from a previous step
    attr_accessor :from

    # FromExpression, if defined, is evaluated to specify the value for the artifact
    attr_accessor :from_expression

    attr_accessor :gcs

    attr_accessor :git

    # GlobalName exports an output artifact to the global scope, making it available as '{{io.argoproj.workflow.v1alpha1.outputs.artifacts.XXXX}} and in workflow.status.outputs.artifacts
    attr_accessor :global_name

    attr_accessor :hdfs

    attr_accessor :http

    # mode bits to use on this file, must be a value between 0 and 0777 set when loading input artifacts.
    attr_accessor :mode

    # name of the artifact. must be unique within a template's inputs/outputs.
    attr_accessor :name

    # Make Artifacts optional, if Artifacts doesn't generate or exist
    attr_accessor :optional

    attr_accessor :oss

    # Path is the container path to the artifact
    attr_accessor :path

    attr_accessor :raw

    # If mode is set, apply the permission recursively into the artifact if it is a folder
    attr_accessor :recurse_mode

    attr_accessor :s3

    # SubPath allows an artifact to be sourced from a subpath within the specified source
    attr_accessor :sub_path

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'archive' => :'archive',
        :'archive_logs' => :'archiveLogs',
        :'artifactory' => :'artifactory',
        :'from' => :'from',
        :'from_expression' => :'fromExpression',
        :'gcs' => :'gcs',
        :'git' => :'git',
        :'global_name' => :'globalName',
        :'hdfs' => :'hdfs',
        :'http' => :'http',
        :'mode' => :'mode',
        :'name' => :'name',
        :'optional' => :'optional',
        :'oss' => :'oss',
        :'path' => :'path',
        :'raw' => :'raw',
        :'recurse_mode' => :'recurseMode',
        :'s3' => :'s3',
        :'sub_path' => :'subPath'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'archive' => :'IoArgoprojWorkflowV1alpha1ArchiveStrategy',
        :'archive_logs' => :'Boolean',
        :'artifactory' => :'IoArgoprojWorkflowV1alpha1ArtifactoryArtifact',
        :'from' => :'String',
        :'from_expression' => :'String',
        :'gcs' => :'IoArgoprojWorkflowV1alpha1GCSArtifact',
        :'git' => :'IoArgoprojWorkflowV1alpha1GitArtifact',
        :'global_name' => :'String',
        :'hdfs' => :'IoArgoprojWorkflowV1alpha1HDFSArtifact',
        :'http' => :'IoArgoprojWorkflowV1alpha1HTTPArtifact',
        :'mode' => :'Integer',
        :'name' => :'String',
        :'optional' => :'Boolean',
        :'oss' => :'IoArgoprojWorkflowV1alpha1OSSArtifact',
        :'path' => :'String',
        :'raw' => :'IoArgoprojWorkflowV1alpha1RawArtifact',
        :'recurse_mode' => :'Boolean',
        :'s3' => :'IoArgoprojWorkflowV1alpha1S3Artifact',
        :'sub_path' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ArgoWorkflows::IoArgoprojWorkflowV1alpha1Artifact` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ArgoWorkflows::IoArgoprojWorkflowV1alpha1Artifact`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'archive')
        self.archive = attributes[:'archive']
      end

      if attributes.key?(:'archive_logs')
        self.archive_logs = attributes[:'archive_logs']
      end

      if attributes.key?(:'artifactory')
        self.artifactory = attributes[:'artifactory']
      end

      if attributes.key?(:'from')
        self.from = attributes[:'from']
      end

      if attributes.key?(:'from_expression')
        self.from_expression = attributes[:'from_expression']
      end

      if attributes.key?(:'gcs')
        self.gcs = attributes[:'gcs']
      end

      if attributes.key?(:'git')
        self.git = attributes[:'git']
      end

      if attributes.key?(:'global_name')
        self.global_name = attributes[:'global_name']
      end

      if attributes.key?(:'hdfs')
        self.hdfs = attributes[:'hdfs']
      end

      if attributes.key?(:'http')
        self.http = attributes[:'http']
      end

      if attributes.key?(:'mode')
        self.mode = attributes[:'mode']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'optional')
        self.optional = attributes[:'optional']
      end

      if attributes.key?(:'oss')
        self.oss = attributes[:'oss']
      end

      if attributes.key?(:'path')
        self.path = attributes[:'path']
      end

      if attributes.key?(:'raw')
        self.raw = attributes[:'raw']
      end

      if attributes.key?(:'recurse_mode')
        self.recurse_mode = attributes[:'recurse_mode']
      end

      if attributes.key?(:'s3')
        self.s3 = attributes[:'s3']
      end

      if attributes.key?(:'sub_path')
        self.sub_path = attributes[:'sub_path']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @name.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          archive == o.archive &&
          archive_logs == o.archive_logs &&
          artifactory == o.artifactory &&
          from == o.from &&
          from_expression == o.from_expression &&
          gcs == o.gcs &&
          git == o.git &&
          global_name == o.global_name &&
          hdfs == o.hdfs &&
          http == o.http &&
          mode == o.mode &&
          name == o.name &&
          optional == o.optional &&
          oss == o.oss &&
          path == o.path &&
          raw == o.raw &&
          recurse_mode == o.recurse_mode &&
          s3 == o.s3 &&
          sub_path == o.sub_path
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [archive, archive_logs, artifactory, from, from_expression, gcs, git, global_name, hdfs, http, mode, name, optional, oss, path, raw, recurse_mode, s3, sub_path].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ArgoWorkflows.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
