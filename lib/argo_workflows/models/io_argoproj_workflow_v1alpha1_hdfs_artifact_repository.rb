=begin
#Argo Workflows API

#Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/

The version of the OpenAPI document: VERSION

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.1

=end

require 'date'
require 'time'

module ArgoWorkflows
  # HDFSArtifactRepository defines the controller configuration for an HDFS artifact repository
  class IoArgoprojWorkflowV1alpha1HDFSArtifactRepository
    # Addresses is accessible addresses of HDFS name nodes
    attr_accessor :addresses

    # Force copies a file forcibly even if it exists
    attr_accessor :force

    # HDFSUser is the user to access HDFS file system. It is ignored if either ccache or keytab is used.
    attr_accessor :hdfs_user

    attr_accessor :krb_c_cache_secret

    attr_accessor :krb_config_config_map

    attr_accessor :krb_keytab_secret

    # KrbRealm is the Kerberos realm used with Kerberos keytab It must be set if keytab is used.
    attr_accessor :krb_realm

    # KrbServicePrincipalName is the principal name of Kerberos service It must be set if either ccache or keytab is used.
    attr_accessor :krb_service_principal_name

    # KrbUsername is the Kerberos username used with Kerberos keytab It must be set if keytab is used.
    attr_accessor :krb_username

    # PathFormat is defines the format of path to store a file. Can reference workflow variables
    attr_accessor :path_format

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'addresses' => :'addresses',
        :'force' => :'force',
        :'hdfs_user' => :'hdfsUser',
        :'krb_c_cache_secret' => :'krbCCacheSecret',
        :'krb_config_config_map' => :'krbConfigConfigMap',
        :'krb_keytab_secret' => :'krbKeytabSecret',
        :'krb_realm' => :'krbRealm',
        :'krb_service_principal_name' => :'krbServicePrincipalName',
        :'krb_username' => :'krbUsername',
        :'path_format' => :'pathFormat'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'addresses' => :'Array<String>',
        :'force' => :'Boolean',
        :'hdfs_user' => :'String',
        :'krb_c_cache_secret' => :'SecretKeySelector',
        :'krb_config_config_map' => :'ConfigMapKeySelector',
        :'krb_keytab_secret' => :'SecretKeySelector',
        :'krb_realm' => :'String',
        :'krb_service_principal_name' => :'String',
        :'krb_username' => :'String',
        :'path_format' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ArgoWorkflows::IoArgoprojWorkflowV1alpha1HDFSArtifactRepository` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ArgoWorkflows::IoArgoprojWorkflowV1alpha1HDFSArtifactRepository`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'addresses')
        if (value = attributes[:'addresses']).is_a?(Array)
          self.addresses = value
        end
      end

      if attributes.key?(:'force')
        self.force = attributes[:'force']
      end

      if attributes.key?(:'hdfs_user')
        self.hdfs_user = attributes[:'hdfs_user']
      end

      if attributes.key?(:'krb_c_cache_secret')
        self.krb_c_cache_secret = attributes[:'krb_c_cache_secret']
      end

      if attributes.key?(:'krb_config_config_map')
        self.krb_config_config_map = attributes[:'krb_config_config_map']
      end

      if attributes.key?(:'krb_keytab_secret')
        self.krb_keytab_secret = attributes[:'krb_keytab_secret']
      end

      if attributes.key?(:'krb_realm')
        self.krb_realm = attributes[:'krb_realm']
      end

      if attributes.key?(:'krb_service_principal_name')
        self.krb_service_principal_name = attributes[:'krb_service_principal_name']
      end

      if attributes.key?(:'krb_username')
        self.krb_username = attributes[:'krb_username']
      end

      if attributes.key?(:'path_format')
        self.path_format = attributes[:'path_format']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          addresses == o.addresses &&
          force == o.force &&
          hdfs_user == o.hdfs_user &&
          krb_c_cache_secret == o.krb_c_cache_secret &&
          krb_config_config_map == o.krb_config_config_map &&
          krb_keytab_secret == o.krb_keytab_secret &&
          krb_realm == o.krb_realm &&
          krb_service_principal_name == o.krb_service_principal_name &&
          krb_username == o.krb_username &&
          path_format == o.path_format
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [addresses, force, hdfs_user, krb_c_cache_secret, krb_config_config_map, krb_keytab_secret, krb_realm, krb_service_principal_name, krb_username, path_format].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ArgoWorkflows.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
