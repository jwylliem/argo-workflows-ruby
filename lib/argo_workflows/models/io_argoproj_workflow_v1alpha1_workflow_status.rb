=begin
#Argo Workflows API

#Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/

The version of the OpenAPI document: VERSION

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.1

=end

require 'date'
require 'time'

module ArgoWorkflows
  # WorkflowStatus contains overall status information about a workflow
  class IoArgoprojWorkflowV1alpha1WorkflowStatus
    attr_accessor :artifact_repository_ref

    # Compressed and base64 decoded Nodes map
    attr_accessor :compressed_nodes

    # Conditions is a list of conditions the Workflow may have
    attr_accessor :conditions

    # EstimatedDuration in seconds.
    attr_accessor :estimated_duration

    # Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
    attr_accessor :finished_at

    # A human readable message indicating details about why the workflow is in this condition.
    attr_accessor :message

    # Nodes is a mapping between a node ID and the node's status.
    attr_accessor :nodes

    # Whether on not node status has been offloaded to a database. If exists, then Nodes and CompressedNodes will be empty. This will actually be populated with a hash of the offloaded data.
    attr_accessor :offload_node_status_version

    attr_accessor :outputs

    # PersistentVolumeClaims tracks all PVCs that were created as part of the io.argoproj.workflow.v1alpha1. The contents of this list are drained at the end of the workflow.
    attr_accessor :persistent_volume_claims

    # Phase a simple, high-level summary of where the workflow is in its lifecycle.
    attr_accessor :phase

    # Progress to completion
    attr_accessor :progress

    # ResourcesDuration is the total for the workflow
    attr_accessor :resources_duration

    # Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
    attr_accessor :started_at

    # StoredTemplates is a mapping between a template ref and the node's status.
    attr_accessor :stored_templates

    attr_accessor :stored_workflow_template_spec

    attr_accessor :synchronization

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'artifact_repository_ref' => :'artifactRepositoryRef',
        :'compressed_nodes' => :'compressedNodes',
        :'conditions' => :'conditions',
        :'estimated_duration' => :'estimatedDuration',
        :'finished_at' => :'finishedAt',
        :'message' => :'message',
        :'nodes' => :'nodes',
        :'offload_node_status_version' => :'offloadNodeStatusVersion',
        :'outputs' => :'outputs',
        :'persistent_volume_claims' => :'persistentVolumeClaims',
        :'phase' => :'phase',
        :'progress' => :'progress',
        :'resources_duration' => :'resourcesDuration',
        :'started_at' => :'startedAt',
        :'stored_templates' => :'storedTemplates',
        :'stored_workflow_template_spec' => :'storedWorkflowTemplateSpec',
        :'synchronization' => :'synchronization'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'artifact_repository_ref' => :'IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus',
        :'compressed_nodes' => :'String',
        :'conditions' => :'Array<IoArgoprojWorkflowV1alpha1Condition>',
        :'estimated_duration' => :'Integer',
        :'finished_at' => :'Time',
        :'message' => :'String',
        :'nodes' => :'Hash<String, IoArgoprojWorkflowV1alpha1NodeStatus>',
        :'offload_node_status_version' => :'String',
        :'outputs' => :'IoArgoprojWorkflowV1alpha1Outputs',
        :'persistent_volume_claims' => :'Array<Volume>',
        :'phase' => :'String',
        :'progress' => :'String',
        :'resources_duration' => :'Hash<String, Integer>',
        :'started_at' => :'Time',
        :'stored_templates' => :'Hash<String, IoArgoprojWorkflowV1alpha1Template>',
        :'stored_workflow_template_spec' => :'IoArgoprojWorkflowV1alpha1WorkflowSpec',
        :'synchronization' => :'IoArgoprojWorkflowV1alpha1SynchronizationStatus'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ArgoWorkflows::IoArgoprojWorkflowV1alpha1WorkflowStatus` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ArgoWorkflows::IoArgoprojWorkflowV1alpha1WorkflowStatus`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'artifact_repository_ref')
        self.artifact_repository_ref = attributes[:'artifact_repository_ref']
      end

      if attributes.key?(:'compressed_nodes')
        self.compressed_nodes = attributes[:'compressed_nodes']
      end

      if attributes.key?(:'conditions')
        if (value = attributes[:'conditions']).is_a?(Array)
          self.conditions = value
        end
      end

      if attributes.key?(:'estimated_duration')
        self.estimated_duration = attributes[:'estimated_duration']
      end

      if attributes.key?(:'finished_at')
        self.finished_at = attributes[:'finished_at']
      end

      if attributes.key?(:'message')
        self.message = attributes[:'message']
      end

      if attributes.key?(:'nodes')
        if (value = attributes[:'nodes']).is_a?(Hash)
          self.nodes = value
        end
      end

      if attributes.key?(:'offload_node_status_version')
        self.offload_node_status_version = attributes[:'offload_node_status_version']
      end

      if attributes.key?(:'outputs')
        self.outputs = attributes[:'outputs']
      end

      if attributes.key?(:'persistent_volume_claims')
        if (value = attributes[:'persistent_volume_claims']).is_a?(Array)
          self.persistent_volume_claims = value
        end
      end

      if attributes.key?(:'phase')
        self.phase = attributes[:'phase']
      end

      if attributes.key?(:'progress')
        self.progress = attributes[:'progress']
      end

      if attributes.key?(:'resources_duration')
        if (value = attributes[:'resources_duration']).is_a?(Hash)
          self.resources_duration = value
        end
      end

      if attributes.key?(:'started_at')
        self.started_at = attributes[:'started_at']
      end

      if attributes.key?(:'stored_templates')
        if (value = attributes[:'stored_templates']).is_a?(Hash)
          self.stored_templates = value
        end
      end

      if attributes.key?(:'stored_workflow_template_spec')
        self.stored_workflow_template_spec = attributes[:'stored_workflow_template_spec']
      end

      if attributes.key?(:'synchronization')
        self.synchronization = attributes[:'synchronization']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          artifact_repository_ref == o.artifact_repository_ref &&
          compressed_nodes == o.compressed_nodes &&
          conditions == o.conditions &&
          estimated_duration == o.estimated_duration &&
          finished_at == o.finished_at &&
          message == o.message &&
          nodes == o.nodes &&
          offload_node_status_version == o.offload_node_status_version &&
          outputs == o.outputs &&
          persistent_volume_claims == o.persistent_volume_claims &&
          phase == o.phase &&
          progress == o.progress &&
          resources_duration == o.resources_duration &&
          started_at == o.started_at &&
          stored_templates == o.stored_templates &&
          stored_workflow_template_spec == o.stored_workflow_template_spec &&
          synchronization == o.synchronization
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [artifact_repository_ref, compressed_nodes, conditions, estimated_duration, finished_at, message, nodes, offload_node_status_version, outputs, persistent_volume_claims, phase, progress, resources_duration, started_at, stored_templates, stored_workflow_template_spec, synchronization].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ArgoWorkflows.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
